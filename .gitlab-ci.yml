stages:
  - sonar
  - build
  - deploy
  - cleanup

variables:
  PROGECT: rmt-new
  APP: deposit-service

sonar:
  stage: sonar
  image: maven:3.8.4-jdk-11-slim
  before_script:
    - mvn package
  script:
    - mvn sonar:sonar
      -Dsonar.projectKey=$PROGECT-$APP-$CI_COMMIT_BRANCH
      -Dsonar.projectName=$PROGECT-$APP-$CI_COMMIT_BRANCH
      -Dsonar.projectVersion=1.0
      -Dsonar.links.ci=$CI_PIPELINE_URL
      -Dsonar.login=$SONAR_LOGIN
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.coverage.exclusions=**/Jwt*.java,**/Dto*.java
  allow_failure: true
  only:
      - dev
      - test
      - stage

sonar-feature:
  stage: sonar
  image: maven:3.8.4-jdk-11-slim
  before_script:
    - mvn package
  script:
    - mvn sonar:sonar
      -Dsonar.projectKey=$PROGECT-$APP-$CI_COMMIT_BRANCH
      -Dsonar.projectName=$PROGECT-$APP-$CI_COMMIT_BRANCH
      -Dsonar.projectVersion=1.0
      -Dsonar.links.ci=$CI_PIPELINE_URL
      -Dsonar.login=$SONAR_LOGIN
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.coverage.exclusions=**/Jwt*.java,**/Dto*.java
  except:
    - dev
    - test
    - stage


docker-dev:
  stage: build
  tags:
    - shell-dev
  before_script:
    - echo "$AND_DOCKER_REGISTRY_RW_PASS" | docker login -u nexus "$AND_DOCKER_REGISTRY" --password-stdin
  script:
    - docker build --tag $AND_DOCKER_REGISTRY_NAME/$PROGECT-$APP:$CI_COMMIT_BRANCH -f Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 .
    - docker push $AND_DOCKER_REGISTRY_NAME/$PROGECT-$APP:$CI_COMMIT_BRANCH
  rules:
    - if: $CI_COMMIT_REF_NAME == "dev"
    - if: $CI_COMMIT_REF_NAME == "dev" && $CI_PIPELINE_SOURCE == "merge_request_event"


docker-test:
  stage: build
  tags:
    - shell-test
  before_script:
    - echo "$AND_DOCKER_REGISTRY_RW_PASS" | docker login -u nexus "$AND_DOCKER_REGISTRY" --password-stdin
  script:
    - docker build --tag $AND_DOCKER_REGISTRY_NAME/$PROGECT-$APP:$CI_COMMIT_BRANCH -f Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 .
    - docker push $AND_DOCKER_REGISTRY_NAME/$PROGECT-$APP:$CI_COMMIT_BRANCH
  rules:
    - if: $CI_COMMIT_REF_NAME == "test"
    - if: $CI_COMMIT_REF_NAME == "test" && $CI_PIPELINE_SOURCE == "merge_request_event"

docker-stage:
  stage: build
  tags:
    - shell-stage
  before_script:
    - echo "$AND_DOCKER_REGISTRY_RW_PASS" | docker login -u nexus "$AND_DOCKER_REGISTRY" --password-stdin
  script:
    - docker build --tag $AND_DOCKER_REGISTRY_NAME/$PROGECT-$APP:$CI_COMMIT_BRANCH -f Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 .
    - docker push $AND_DOCKER_REGISTRY_NAME/$PROGECT-$APP:$CI_COMMIT_BRANCH
  rules:
    - if: $CI_COMMIT_REF_NAME == "stage"
    - if: $CI_COMMIT_REF_NAME == "stage" && $CI_PIPELINE_SOURCE == "merge_request_event"


docker-feature:
  stage: build
  tags:
    - shell-dev
  before_script:
    - echo "$AND_DOCKER_REGISTRY_RW_PASS" | docker login -u nexus "$AND_DOCKER_REGISTRY" --password-stdin
  script:
    - docker build --tag $AND_DOCKER_REGISTRY_NAME/$PROGECT-$APP:$CI_COMMIT_BRANCH -f Dockerfile --build-arg BUILDKIT_INLINE_CACHE=1 .
  except:
    - dev
    - test
    - stage

deploy-dev:
  stage: deploy
  tags:
    - shell-dev
  before_script:
    - echo "$AND_DOCKER_REGISTRY_RO_PASS" | docker login -u nexus-ro "$AND_DOCKER_REGISTRY" --password-stdin
  script:
    - docker stop $APP-$CI_COMMIT_BRANCH || true
    - docker rm $APP-$CI_COMMIT_BRANCH || true
    - docker rmi -f $AND_DOCKER_REGISTRY_NAME/$PROGECT-$APP:$CI_COMMIT_BRANCH || true
    - docker-compose -f docker-compose.yml down || true
    - docker-compose -f docker-compose.yml up --force-recreate -d
  rules:
    - if: $CI_COMMIT_REF_NAME == "dev"
    - if: $CI_COMMIT_REF_NAME == "dev" && $CI_PIPELINE_SOURCE == "merge_request_event"

deploy-test:
  stage: deploy
  tags:
    - shell-test
  before_script:
    - echo "$AND_DOCKER_REGISTRY_RO_PASS" | docker login -u nexus-ro "$AND_DOCKER_REGISTRY" --password-stdin
  script:
    - docker stop $APP-$CI_COMMIT_BRANCH || true
    - docker rm $APP-$CI_COMMIT_BRANCH || true
    - docker rmi -f $AND_DOCKER_REGISTRY_NAME/$PROGECT-$APP:$CI_COMMIT_BRANCH || true
    - docker-compose -f docker-compose.yml down || true
    - docker-compose -f docker-compose.yml up --force-recreate -d
  rules:
    - if: $CI_COMMIT_REF_NAME == "test"
    - if: $CI_COMMIT_REF_NAME == "test" && $CI_PIPELINE_SOURCE == "merge_request_event"

deploy-stage:
  stage: deploy
  tags:
    - shell-stage
  before_script:
    - echo "$AND_DOCKER_REGISTRY_RO_PASS" | docker login -u nexus-ro "$AND_DOCKER_REGISTRY" --password-stdin
  script:
    - docker stop $APP-$CI_COMMIT_BRANCH || true
    - docker rm $APP-$CI_COMMIT_BRANCH || true
    - docker rmi -f $AND_DOCKER_REGISTRY_NAME/$PROGECT-$APP:$CI_COMMIT_BRANCH || true
    - docker-compose -f docker-compose.yml down || true
    - docker-compose -f docker-compose.yml up --force-recreate -d
  rules:
    - if: $CI_COMMIT_REF_NAME == "stage"
    - if: $CI_COMMIT_REF_NAME == "stage" && $CI_PIPELINE_SOURCE == "merge_request_event"


cleanup-dev:
  stage: cleanup
  tags:
    - shell-dev
  script:
     - docker system prune -f --filter "label!=keep"
  when: always
  except:
    - test
    - stage

cleanup-test:
  stage: cleanup
  tags:
    - shell-test
  script:
     - docker system prune -f --filter "label!=keep"
  when: always
  rules:
    - if: $CI_COMMIT_REF_NAME == "test"
    - if: $CI_COMMIT_REF_NAME == "test" && $CI_PIPELINE_SOURCE == "merge_request_event"

cleanup-stage:
  stage: cleanup
  tags:
    - shell-stage
  script:
     - docker system prune -f --filter "label!=keep"
  when: always
  rules:
    - if: $CI_COMMIT_REF_NAME == "stage"
    - if: $CI_COMMIT_REF_NAME == "stage" && $CI_PIPELINE_SOURCE == "merge_request_event"

